@use "sass:map";
@use "../../scss/base/colors.scss";
@use "../../scss/base/shadows.scss";
@use "../../scss/base/input.scss";
@use "../../scss/mixins/any.scss";
@use "../../scss/mixins/form.scss";
@use "../../scss/themes.scss";

$button-sizes: "extra-small", "small", "medium", "large";

.rc-button {
  @include any.rc-component;
  @include form.border-size;
  @include form.font-size--bySize($button-sizes);
  @include form.height--bySize($button-sizes);
  @include form.paddings--bySize($button-sizes, 2.5, -1);

  outline: none;
  cursor: pointer;
  position: relative;
  display: inline-block;
  align-items: center;
  flex: 0 0 auto;
  white-space: nowrap;
  user-select: none;
  text-decoration: none;
  transition: box-shadow 0.5s cubic-bezier(0.075, 0.82, 0.165, 1),
    color 0.2s cubic-bezier(0.075, 0.82, 0.165, 1), background 0.1s ease-out;
  box-shadow: shadows.$size--closed transparent;

  &:active {
    color: colors.$alpha;
    fill: colors.$alpha;
    stroke: colors.$alpha;
  }

  &:hover,
  &:focus {
    border-bottom-width: input.$border-bottom-width;
    border-bottom-color: rgba(0, 0, 0, 0.2);

    &:active {
      border-bottom-color: transparent;
    }
  }

  &:not(.rc-button--noFill):not(:disabled) {
    border-bottom-color: rgba(0, 0, 0, 0.2);
  }

  @each $kind in themes.$kinds {
    &.rc-button--#{$kind} {
      background-color: map.get(themes.$colors, $kind);
      border-color: map.get(themes.$colors, $kind);
      color: map.get(themes.$colors--opposite, $kind);
      fill: map.get(themes.$colors--opposite, $kind);
      stroke: map.get(themes.$colors--opposite, $kind);

      &.rc-button--noFill {
        background-color: transparent;
        color: map.get(themes.$colors--dark, $kind);
        fill: map.get(themes.$colors, $kind);
        stroke: map.get(themes.$colors, $kind);
      }

      &:active {
        color: colors.$alpha;
        fill: colors.$alpha;
        stroke: colors.$alpha;
      }

      &:active,
      &:focus {
        box-shadow: shadows.$size map.get(themes.$shadows, $kind);
        z-index: 3;
      }

      &:hover,
      &:focus {
        background-color: map.get(themes.$colors, $kind);
        border-color: map.get(themes.$colors, $kind);

        &.rc-button--noFill {
          color: map.get(themes.$colors--opposite, $kind);
          fill: map.get(themes.$colors--opposite, $kind);
          stroke: map.get(themes.$colors--opposite, $kind);
        }
      }

      &:hover:active {
        background: map.get(themes.$colors--dark, $kind);

        &.rc-button--noFill {
          color: colors.$alpha;
          fill: colors.$alpha;
          stroke: colors.$alpha;
        }
      }
    }
  }

  &.rc-button--disabled {
    opacity: input.$opacity--disabled;
    pointer-events: none;
    cursor: auto;
  }
}

.rc-button__content {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
}

.rc-button__icon {
  display: flex;
  fill: inherit;
  stroke: inherit;
}

.rc-button__icon--left {
  margin-right: 5px;
  margin-left: 0;
}

.rc-button__icon--right {
  margin-right: 0;
  margin-left: 5px;
}
